{% extends 'layout.twig' %}

{% block body %}
	<div id="vote-wrapper" class="vote-wrapper" style="background-color: #2C3037">
		<h1 id="title" style="color: #57B4C1;">Type !mad [phrase] to add to the story!</h1>
		<div class="container">
			<!-- <h1 style="color: #3fa34d;">YES: <span id="yes-count">0</span></h1>
			<h1 style="color: #cc2936">NO: <span id="no-count">0</span></h1> -->
			<h1 id="story"></h1>
<!-- 		<button id="start" onclick="startVoting()">Start</button>
			<button id="end" onclick="endVoting()">End</button>
			<button id="reset" onclick="location.reload()">Reset</button> -->
		</div>
	</div>
	<script>
		var story = `{{ story }}`;
		var htmlStory = `{{ htmlStory }}`;
		var client = null;
		var words = [];
		var author = [];
		var isEditing = true;
		var isSpeaking = false;
		var voices = window.speechSynthesis.getVoices();

		$( document ).ready(function() {
			setTimeout(() => {
				voices = window.speechSynthesis.getVoices();
				console.log( voices );
			}, 2000 );

			$("#story").css("color", "#2C3037");

			// Replace blanks with elements
			// story = story.replace( /____/g, "<span style='color: #66ABEF;'>____</span>" );
			$("#story").html( htmlStory );

			var options = {
				options: {
					debug: false
				},
				connection: {
					reconnect: true,
				},
				identity: {
					username: "{{ username }}",
				    password: "{{ oauth }}"
				},
				channels: ["#{{ username }}"]
			};

			client = new tmi.client(options);

			// Connect the client to the server..
			client.connect();

			client.on("chat", function (channel, userstate, message, self) {
				if( message.startsWith( "!speak " ) ) {
					var msg = new SpeechSynthesisUtterance();
					msg.voice = voices[9]; // Note: some voices don't support altering params
					// msg.voiceURI = 'native';
					msg.volume = 1; // 0 to 1
					msg.rate = 1; // 0.1 to 10
					msg.pitch = 1; //0 to 2
					msg.text = message.replace( "!speak ", "" ).substring(0, 200);
					msg.lang = 'en-US';

					msg.onend = function(e) {
						isSpeaking = false;
					  console.log('Finished in ' + event.elapsedTime + ' seconds.');
					};
					if( !isSpeaking ) {
						speechSynthesis.speak(msg);
					}
				}

				if( isEditing &&
					( message.startsWith( "!lib " ) || message.startsWith( "!mad " ) ) ) {
					var value = message.replace( "!lib ", "" ).replace( "!mad ", "" ).substring(0, 32);
					if( value.includes( "<" ) && value.includes( ">" ) ) return; // Prevent XSS attacks LOL
					words.push( value );
					author.push( userstate["display-name"] );

					// 66ABEF
					var replaceValue = "<span class='fin replaced'><u>" + value + "</u><small>" + userstate["display-name"] + "</small> </span>";
					var start = htmlStory.indexOf( "<span class='replaced'" );
					var end = htmlStory.indexOf( "></span" );
					var replace = htmlStory.substring( start, end + 8 );
					htmlStory = htmlStory.replace( replace, replaceValue );
					$("#story").html( htmlStory );
					story = story.replace( "____", value );

					if( !htmlStory.includes( "____" ) ) {
						$("#story").css( "color", "#fff" );
						isEditing = false;

						var storyWords = story.split( " " );
						var wordgroups = [];
						for( var i = 0, len = storyWords.length; i < len; i += 4 ) {
							wordgroups.push( storyWords.slice(i, i + 4).join( " " ) );
						}

						let sayNextWordGroup = function() {
							var group = wordgroups.shift();
							var msg = new SpeechSynthesisUtterance();
							msg.voice = voices[13]; // Note: some voices don't support altering params
							msg.voiceURI = 'native';
							msg.volume = 1; // 0 to 1
							msg.rate = 1; // 0.1 to 10
							msg.pitch = 1; //0 to 2
							msg.text = group;
							msg.lang = 'en-US';
							msg.onend = function(e) {
								isSpeaking = false;
							  console.log('Finished in ' + event.elapsedTime + ' seconds.');
								if( wordgroups.length > 0 ) {
									sayNextWordGroup();
								}
							};
							if( !isSpeaking ) {
								speechSynthesis.speak(msg);
							}
						}
						sayNextWordGroup();
					}
				}
			});
		});
	</script>
{% endblock %}
